package folding.collections

import folding


typealias Map(K V) foreign
expect {
    :get (key~K) V?
}

typealias MutableMap(K V) foreign
expect {
    :put (key~K value~V) V?

    impl Map(K V)
}

class MapEntry(K V) { (key~K value~V) }


to K V (key~K value~V) MapEntry(K V) = MapEntry(#key #value)

Map K V (mapEntries~Array(MapEntry(K V))) foreign Map(K V)
MutableMap K V (mapEntries~Array(MapEntry(K V))) foreign MutableMap(K V)

