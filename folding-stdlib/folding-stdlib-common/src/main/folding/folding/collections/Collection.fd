package folding.collections

import folding


typealias Iterable(T) foreign
expect {
    :getIterator Iterator(T)
}

iterator T (iterable~Iterable(T)) Iterator(T) = #iterable:getIterator


typealias MutableIterable(T) foreign
expect {
    :mutableIterator MutableIterator(T)

    impl Iterable(T)
}


typealias Collection(T) foreign
expect {
    :length Int
    :contains T (element~T) Boolean

    impl Iterable(T)
}


typealias MutableCollection(T) foreign
expect {
    :add (element~T) Boolean
    :remove (element~T) Boolean

    impl MutableIterable(T)
    impl Collection(T)
}


typealias List(T) foreign
expect {
    :get (index~Int) T

    impl Collection(T)
}


typealias MutableList(T) foreign
expect {
    :add (index~Int element~T) Unit
    :set (index~Int element~T) T

    impl MutableCollection(T)
    impl List(T)
}


typealias Set(T) foreign
expect {
    impl Collection(T)
}


typealias MutableSet(T) foreign
expect {
    impl MutableCollection(T)
    impl Set(T)
}

