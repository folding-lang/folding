package folding.collections

import folding



List T (elements... ~T) foreign List([~T])
inverse (#result::get(0))
inverse (#result::get(0) #result::get(1))
inverse (#result::get(0) #result::get(1) #result::get(2))
inverse (#result::get(0) #result::get(1) #result::get(2) #result::get(3))
inverse (#result::get(0) #result::get(1) #result::get(2) #result::get(3) #result::get(4))

MutableList T (elements... ~T) foreign MutableList(T)
inverse (#result::get(0))
inverse (#result::get(0) #result::get(1))
inverse (#result::get(0) #result::get(1) #result::get(2))
inverse (#result::get(0) #result::get(1) #result::get(2) #result::get(3))
inverse (#result::get(0) #result::get(1) #result::get(2) #result::get(3) #result::get(4))


Set T (elements... ~T) foreign Set([~T])
MutableSet T (elements... ~T) foreign MutableSet(T)




//fold T R (iterable~Iterable([~T]) initial~R operation~(R T)->R) foreign R



