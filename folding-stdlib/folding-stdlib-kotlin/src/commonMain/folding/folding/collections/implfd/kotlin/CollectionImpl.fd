package folding.collections.implfd.kotlin

import folding
import folding.collections
import folding.collections.kotlin


abstract class Iterable(T) {
    :getIterator Iterator(T) = #this:iterator::asFolding

    impl kotlin.collections.'Iterable'(T)
}


abstract class MutableIterable(T) {
    :mutableIterator MutableIterator(T) = #this:iterator::asFolding

    impl Iterable(T)
    impl kotlin.collections.'MutableIterable'(T)
}


abstract class Collection(T) {
    :length Int = #this:#size

    impl Iterable(T)
    impl kotlin.collections.'Collection'(T)
}


abstract class MutableCollection(T) {
    impl Collection(T)
    impl MutableIterable(T)
    impl kotlin.collections.'MutableCollection'(T)
}


abstract class List(T) {
    impl Collection(T)
    impl kotlin.collections.'List'(T)
}


abstract class MutableList(T) {
    :insert (index~Int element~T) Unit = #this:add(#index #element)

    impl List(T)
    impl MutableCollection(T)
    impl kotlin.collections.'MutableList'(T)
}


abstract class Set(T) {
    impl Collection(T)
    impl kotlin.collections.'Set'(T)
}


abstract class MutableSet(T) {
    impl MutableCollection(T)
    impl Set(T)
    impl kotlin.collections.'Set'(T)
}

