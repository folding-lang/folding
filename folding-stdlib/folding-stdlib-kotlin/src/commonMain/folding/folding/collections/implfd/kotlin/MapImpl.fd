package folding.collections.implfd.kotlin

import folding
import folding.collections


abstract class Map(K V) {
    impl kotlin.collections.'Map'(K V)
}
abstract class MutableMap(K V) {
    impl Map(K V)
    impl kotlin.collections.'MutableMap'(K V)
}

get K V (map~Map(K V) key~K) V? = #map:get(#key)
put K V (mutableMap~MutableMap(K V) key~K value~V) V? = #mutableMap:put(#key #value)


mapOf K V (mapEntries~Array(MapEntry(K V))) Map(K V) =
    kotlin.collections.mapOf(...#mapEntries:map(
        [key~K value~V from! MapEntry(->key ->value)~MapEntry(K V)]
        kotlin.Pair(#key #value)
    ):toTypedArray)::asFolding
mutableMapOf K V (mapEntries~Array(MapEntry(K V))) MutableMap(K V) =
    kotlin.collections.mutableMapOf(...#mapEntries:map(
        [key~K value~V from! MapEntry(->key ->value)~MapEntry(K V)]
        kotlin.Pair(#key #value)
    ):toTypedArray)::asFolding


