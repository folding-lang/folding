//package <root>

import folding
import folding.collections
import folding.io

class MyStringBuilder {
    (separator~String)

    :#stack MutableList(String) = MutableList

    inherit() impl Any {
        :toString String =
            if (#stack:length == 0) "" else
            #stack reduce! [acc~String e~String] #acc++#separator++#e
    }

    impl (String) -> MyStringBuilder {
        :invoke (str~String) MyStringBuilder = do {
            #stack:add(#str)
            return this
        }
    }
}

MyStringBuilder MyStringBuilder = MyStringBuilder(" ")

main Unit = do {
    remain! let ->a = MyStringBuilder unit
    println(
        #a:("Hello"):("World!")
    )
    let ->b+1 = 2 println(#b)
    println(
        List(1 2 3 4 5 6 7 8)
            (map! [(3 - ->num)->? ~ Int] #num)
            :joinToString(", " "[" "]")
    )
    null ?? [] println("ahhhh")
}